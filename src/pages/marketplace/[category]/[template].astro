---
import type { GetStaticPaths } from "astro";
import MarketplacePage from "../../../components/MarketplacePage.astro";
import { getCollection, getEntry } from 'astro:content';
import { Aside } from '@astrojs/starlight/components';
import DocsCTA from "../../../components/DocsCTA.astro";
import RelatedArticles from "../../../components/RelatedArticles.astro";

export const getStaticPaths = (async () => {
    const apps = await getCollection('marketplace', entry => entry.id.includes('/'));

    return apps.map(app => {
        const [category, template] = app.id.split('/');

        return {
            params: {
                category,
                template,
            }
        }
    });
}) satisfies GetStaticPaths;

const category = await getEntry('marketplace', Astro.params.category);
const template = await getEntry('marketplace', `${Astro.params.category}/${Astro.params.template}`);

if (!template || !category) {
    return Astro.redirect('/404');
}

const extendsApps = await getCollection('marketplace', entry => template.data.extends?.map((e: any) => e.slug).includes(entry.id));
const usedByApps = await getCollection('marketplace', entry => entry.data.extends?.map((e: any) => e.slug).includes(template.id));

const allTags = await getCollection('marketplaceTags');

const tags = template?.data.tags.map((tag: any) => {
    const tagEntry = allTags.find((t: any) => t.id === tag);
    return tagEntry;
});

const alternativeIds = template?.data.alternativeTo || [];
const alternatives = await getCollection('alternatives', ({ id }) => alternativeIds.includes(id));

---

<MarketplacePage
    title={"Self-hosted " + template.data.name + ", deploy to your own server"}
    description={"Deploy " + template.data.name + " with Docker to your VPS or dedicated server. Top-notch security with HTTPS, Backups, and Server Monitoring included."}
    showCategories={false}
    tags={tags}
    breadcrumbItems={[
        { label: "Home", href: "/" },
        { label: "Marketplace", href: "/marketplace/" },
        { label: category.data.name, href: `/marketplace/${category.id}/` },
        { label: template.data.name },
    ]}
>
    <script type="application/ld+json" set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "SoftwareApplication",
        "name": template.data.name,
        "applicationCategory": category.data.name,
        "description": template.data.description,
        "url": template.data.url,
        "image": "https://ptah.sh" + template.data.logo,
        "softwareVersion": template.data.version,
        "releaseNotes": template.data.releaseNotes,
        "featureList": template.data.features?.join(", "),
        "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": "5",
            "ratingCount": "1",
            "bestRating": "5",
            "worstRating": "1"
        }
    })} />

    {template.data.logo && (
        <img 
            src={template.data.logo} 
            alt={`${template.data.name} logo`} 
            class="float-right w-24 h-24 md:w-36 md:h-36"
        />
    )}

    <dl>
        <dt>Info</dt>
        <dd>{template.data.description}</dd>
        <dt>About {template.data.name}</dt>
        <dd>{template.data.about}</dd>
        <dt>Website</dt>
        <dd><a href={template?.data.url} rel="noopener nofollow" target="_blank">{template?.data.url}</a></dd>
        <dt>Extends</dt>
        <dd>
            {extendsApps.length === 0 && <i>None</i>}
            <ul class="px-4">
                {extendsApps.map(app => (
                    <li>
                        <a href={`/marketplace/${app.id}/`}>{app.data.name}</a> - {app.data.description}
                    </li>
                ))}
            </ul>
        </dd>
        <dt>Used by</dt>
        <dd>
            {usedByApps.length === 0 && <i>None</i>}
            <ul class="px-4">
                {usedByApps.map(app => (
                    <li>
                        <a href={`/marketplace/${app.id}/`}>{app.data.name}</a> - {app.data.description}
                    </li>
                ))}
            </ul>
        </dd>

        {alternatives.length > 0 && (
            <>
                <dt>{template.data.name} is a Good Alternative to</dt>
                <dd>
                    <ul class="px-4 flex flex-wrap gap-2 not-content">
                        {alternatives.map((alt) => (
                            <li>
                                <a href={alt.data.url} rel="noopener nofollow" target="_blank">{alt.data.name}</a>
                                <p class="text-sm text-gray-600">{alt.data.description}</p>
                            </li>
                        ))}
                    </ul>
                </dd>
            </>
        )}
    </dl>

    {template?.data.thirdParty && template.data.thirdParty.length > 0 && (
        <Aside type="note" title="Third-Party Requirements">
            <ul class="list-disc pl-5">
                {template.data.thirdParty.map((requirement: any) => (
                    <li class="mb-2">
                        <a href={requirement.url} class="font-semibold text-blue-600 hover:underline" rel="noopener nofollow" target="_blank">{requirement.name}</a>
                        {requirement.description && (
                            <span class="text-gray-700"> - {requirement.description}</span>
                        )}
                        {requirement.instructionsUrl && (
                            <span> (<a href={requirement.instructionsUrl} class="text-blue-600 hover:underline" rel="noopener nofollow" target="_blank">Setup instructions</a>)</span>
                        )}
                    </li>
                ))}
            </ul>
        </Aside>
    )}

    <h2>Processes</h2>
    <ul class="list-none p-0">
        {template.data.processes.map((process: any) => (
            <li class="border border-gray-200 my-4 rounded">
                <h3 class="bg-gray-50 font-bold p-4" style="font-size: 1rem">{process.name}</h3>
                <div class="px-4">
                    <p>{process.description}</p>

                    <div class="text-sm">
                        <a href={process.url} rel="noopener nofollow" target="_blank">Documentation</a>
                    </div>

                    <div class="flex flex-wrap gap-4">
                        {process.data.workers.map((worker: any) => (
                            <dl class="pl-4 min-w-64" style="margin-top: 0">
                                <dt>Worker Name</dt>
                                <dd>{worker.name}</dd>
                                <dt>Docker Image</dt>
                                <dd><code>{worker.dockerImage}</code></dd>
                            </dl>
                        ))}
                    </div>
                </div>
            </li>
        ))}
    </ul>
    <h2>Why host {template?.data.name} on your own VPS or dedicated server?</h2>
    <p>Hosting {template?.data.name} on your own VPS or dedicated server gives you full control over your application. You can customize the server environment, optimize performance, and ensure security. It also allows you to scale your application as needed without any restrictions.</p>
    <p>Additionally, hosting on your own VPS or dedicated server can lead to significant cost savings. By managing your own infrastructure, you can avoid the recurring costs associated with cloud services and optimize your resource allocation to meet your specific needs. This can result in a more cost-effective solution for your application.</p>
    <p>Want to explore more options? <a href={`/marketplace/${category?.id}/`}>See all {category?.data.description}</a> to find the best fit for your needs.</p>

    <DocsCTA />

    <RelatedArticles relatedApps={[template.id]} />

</MarketplacePage>
